package com.ecursos.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MilitarAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilitarAllPropertiesEquals(Militar expected, Militar actual) {
        assertMilitarAutoGeneratedPropertiesEquals(expected, actual);
        assertMilitarAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilitarAllUpdatablePropertiesEquals(Militar expected, Militar actual) {
        assertMilitarUpdatableFieldsEquals(expected, actual);
        assertMilitarUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilitarAutoGeneratedPropertiesEquals(Militar expected, Militar actual) {
        assertThat(expected)
            .as("Verify Militar auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilitarUpdatableFieldsEquals(Militar expected, Militar actual) {
        assertThat(expected)
            .as("Verify Militar relevant properties")
            .satisfies(e -> assertThat(e.getSaram()).as("check saram").isEqualTo(actual.getSaram()))
            .satisfies(e -> assertThat(e.getNomeCompleto()).as("check nomeCompleto").isEqualTo(actual.getNomeCompleto()))
            .satisfies(e -> assertThat(e.getNomeGuerra()).as("check nomeGuerra").isEqualTo(actual.getNomeGuerra()))
            .satisfies(e -> assertThat(e.getOm()).as("check om").isEqualTo(actual.getOm()))
            .satisfies(e -> assertThat(e.getTelefone()).as("check telefone").isEqualTo(actual.getTelefone()))
            .satisfies(e -> assertThat(e.getStatusMilitar()).as("check statusMilitar").isEqualTo(actual.getStatusMilitar()))
            .satisfies(e -> assertThat(e.getForca()).as("check forca").isEqualTo(actual.getForca()))
            .satisfies(e -> assertThat(e.getNrAntiguidade()).as("check nrAntiguidade").isEqualTo(actual.getNrAntiguidade()))
            .satisfies(e -> assertThat(e.getUltimaPromocao()).as("check ultimaPromocao").isEqualTo(actual.getUltimaPromocao()))
            .satisfies(e -> assertThat(e.getCpf()).as("check cpf").isEqualTo(actual.getCpf()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMilitarUpdatableRelationshipsEquals(Militar expected, Militar actual) {
        assertThat(expected)
            .as("Verify Militar relationships")
            .satisfies(e -> assertThat(e.getPosto()).as("check posto").isEqualTo(actual.getPosto()));
    }
}
